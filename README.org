* Web Skills Assignment: Goal
This is an assignment for [[http://digital.hackinghistory.ca][Digital History]], a digital humanities course taught in the History Department at the University of Toronto.  If you're a teacher, feel free to fork and repurpose for your own courses.  If you're a student, keep reading!

You do not have to become a coder to do well in this course.  However, you /will/ have to be willing to explore technical skills that you might not otherwise develop as a humanities scholar.  In this assignment, you will learn /very basic/ web coding skills and apply them to a simple problem. The goal of the assignment is to provide you with basic technical knowledge that you will need for later assignments.  

* Expectations
This assignment is graded pass/fail. You will only get credit if *all of your code runs as required.* To pass the assignment, you must:
- successfully fork this repository and clone a local copy
- complete all three parts of this assignment, such that both the student-visible tests and the instructor/machine-visible tests all pass.  See below for details but please note that Part 1 includes some work which is to be done on the [[https://codecademy.com/][Codecademy]] website
- commit your work to git as you go, so that a query of the git history will show multiple steps. Please note that git commits are timestamped and unique; they are an excellent defense against accusations of cheating, so please use them extensively.
- push all your changes to github
- submit your assignment via Github Pull Request

* Details

Create a fork of this repository by [[https://classroom.github.com/a/y1HlCM6k][following this link]].  Clone locally via the "Clone or Download" process discussed in [[https://github.com/DigitalHistory/Github][your previous assignment]] and [[https://help.github.com/articles/cloning-a-repository/][described here]], and do your work in Atom. 

Web pages are composed of three components:  HTML, CSS, and Javascript.  HTML provides the /structure and content/ of a web page; CSS controls the /style of presentation/; and Javascript permits /dynamic modification/ of both.  To explore the web from the inside, you need to be a little bit comfortable in all three. 

** Part 1 - HTML and CSS 

*** Problem 1: Codecademy.com
Codeacademy.com is a platform that focusses on teaching web skills; [[http://www.codecademy.com/][head over there and set up an account]]. Once you've done that, simply complete the [[http://www.codecademy.com/tracks/web][HTML & CSS]] course.

When you have finished this course, embed a link to your /achievements page/. This page should have the structure ~https://www.codecademy.com/users/YOURCODECADEMYUSERNAME/achievements~. You can also get  there by clicking "view my profile under the top right menu item with your picture on it, and tfrom that page clicking "Badges".

*** Problem 2: Blog Post content
- steal from [[https://canvas.uw.edu/courses/1118282/assignments/3818107][joel's exercise 01]]
- has to add some html about a historical character
*** Problem 3: Blog Post Styling
- add title bar 100%
- add colors
- change font family
- change link color to something else
- others?
** Part 2 - Javascript in the Console  
For Javascript, we will use the excellent online book [[http://eloquentjavascript.net/][Eloquent Javascript]] as a textbook. Read Chapters 1-4 and, importantly, *do all the exercises* using [[http://eloquentjavascript.net/code/][the code sandbox]]. Some of the discussion, especially in chapter 3, may be hard to follow. The exercises may also be quite hard. It is fair to give up and look at the solutions; but be sure you understand the solutions once you've looked at them.

Let me stress this strongly: you almost certainly will not be able to do the exercises without doing the reading.  

Once you have read the textbook and done the exercises, you should find this part of the assignment very straightforward. Complete the code in ~skeleton.js~ according to the instructions in that file.  Check your code by testing it in the [[http://eloquentjavascript.net/code/][EJ code sandbox]], [[https://developer.mozilla.org/en/docs/Tools/Scratchpad][Firefox Scratchpad]], or the [[https://developers.google.com/web/tools/chrome-devtools/debug/console/][Chrome console]].  I have written tests for you which will produce the appropriate output when your code is correct.  

** Part 3 - Javascript in the Browser
Continue to read /Eloquent Javascript/, this time chapters [[http://www.eloquentjavascript.net/12_browser.html][12]] and [[http://eloquentjavascript.net/13_dom.html][13]]. Again, read the chapters and do the exercises; if the exercises are too hard, look at the answers but *be sure you understand them*.  

[[./index.html]] is a very simple html file that contains a table of prime ministers.  Your task is write one or more functions that will *add links to the Wikipedia pages of all the prime ministers*.  

Look at the structure of the table. Each row looks like this:

#+BEGIN_SRC html
      <tr>
        <td class="PM">John Sparrow David Thompson</td>
        <td class="Party">Conservative</td>
        <td class="From">1892</td>
        <td class="To">1894</td>
      </tr>
#+END_SRC

Your code should change that to this:
#+BEGIN_SRC html
      <tr>
        <td class="PM"><a href="https://en.wikipedia.org/wiki/John_Sparrow_David_Thompson">John Sparrow David Thompson</a></td>
        <td class="Party">Conservative</td>
        <td class="From">1892</td>
        <td class="To">1894</td>
      </tr>

#+END_SRC

Rather than asking you to include your code directly in ~index.html~, I have provided a script tag at the end of the file which loads the file ~ministers.js~.  There is some template code in that file already; complete the template and test your code by (re)loading index.html in your browser.

I myself will test your code by loading the page and clicking on the links.  They should all point to Wikipedia pages.

*Hints:* In this exercise we are beginning to actually do a form of digital history. Notice that we are treating /text/ as /data/: transforming names into "pointers" that give us access to further information.  

This is made possible because the webpage itself is already well-structured.  Notice the class attribute on each ~<td>~ element:
#+BEGIN_SRC html
<td class="PM">John Sparrow David Thompson</td>
#+END_SRC

Now, consider the structure of Wikipedia links:

#+BEGIN_SRC html
https://en.wikipedia.org/wiki/John_Sparrow_David_Thompson
#+END_SRC

Note they always consist of "https://en.Wikipedia.org/wiki/" + A_Name_With_Spaces_Replaced_By_Underscores.  But, lucky you, /Wikipedia will rewrite spaces as underscores for you!/ If you would like to try to do that part yourself, take a look at [[http://www.w3schools.com/jsref/jsref_replace.asp][the Javascript string replace method]].  

We will use skills developed in the exercises from chapter 13. Your function will have to:
- /find and collect/ all the elements with the class "PM". The method you will need to use is mentioned only once in chapter 13, under "Finding Elements."
- /clear/ the existing text node.
- /add a child node/ of type "a" with text content that comes from the original content, and a link that is constructed of the Wikipedia address prefix + the original content.  

If you find this is too easy: wikify *all* the fields in each row.  Now click on the "party" links. What could you do to fix them? Also, can you change the background color of one or more classes? 

*One more challenge for the eager.* Right now, the wiki links are added immediately when the page loads. Can you defer adding the links until a button is clicked? You will need to add a button element with an "onClick" attribute to index.html, and move the /execution/ of "linkifyClass" out of link-ministers.js.  

P.S. -- you may find it useful or interesting to look at the script I used to generate the table. You will find it in [[./make-minister-table.js]]

* Handing in

As mentioned above: when you are finished -- when your code passes all the tests -- submit your code via pull request.  This is the only acceptable submission process!
